
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
    Admin
    Mod
    Verified
}

model User {
    id Int @id @default(autoincrement())
    username String @db.VarChar(255)
    email String @db.VarChar(255) @unique
    password String @db.VarChar(255)
    avatar String? @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    tier Int @db.SmallInt
    role Role?
    activated Boolean @default(false)
    activationCode String @db.VarChar(255)
    ip String @db.Inet
    happenings Happening[]
    interestedHappenings InterestedHappening[]
    reviews Review[] @relation(name: "reviews")
    reviwedUsers Review[] @relation(name: "reviewed")
    followers Follower[] @relation(name: "followers")
    following Follower[] @relation(name: "following")
    notifications Notification[]
    reportedUsers Report[] @relation(name: "reportedUsers")
    reports Report[] @relation(name: "reports")
    bannedUsers Ban[] @relation(name: "bannedUsers")
    bans Ban[] @relation(name: "bans")
}

model Server {
    id Int @id @default(autoincrement())
    ip String @db.VarChar(255)
    port Int
    happenings Happening[]
}

enum Place {
    HERE
    THERE
}

enum Status {
    NotStarted
    Happening
    Finished
    InQueue
}

enum HappeningType {
    Run
    Event
}

enum NotificationType {
    Followage
    InterestedInHappening
    AddedInTeam
    RemovedFromTeam
    MadeAnAccountPOG
    NoEmptyServers // you get this when you try to start a happening when all servers are in use
}

model Happening {
    id Int @id @default(autoincrement())
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId Int
    place Place
    title String?
    mapName String @db.VarChar(255)
    teamSize Int? @db.SmallInt
    description String?
    status Status @default(NotStarted)
    server Server? @relation(fields: [serverId], references: [id])
    serverId Int?
    connectString String?
    startAt DateTime
    endAt DateTime?
    thumbnail String? @db.VarChar(255)
    type HappeningType
    interestedPlayers InterestedHappening[]
    reviews Review[]
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}

model InterestedHappening {
    id Int @id @default(autoincrement())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int
    happening Happening @relation(fields: [happeningId], references: [id], onDelete: Cascade)
    happeningId Int
    inTeam Boolean @default(false)
}

model Review {
    id Int @id @default(autoincrement())
    author User @relation(fields: [authorId], references: [id], name: "reviewed", onDelete: Cascade)
    authorId Int
    reviewedUser User @relation(fields: [reviewedUserId], references: [id], name: "reviews", onDelete: Cascade)
    reviewedUserId Int
    happening Happening @relation(fields: [happeningId], references: [id], onDelete: Cascade)
    happeningId Int
    review String?
    rate Int @db.SmallInt
    createdAt DateTime @default(now())
}

model Follower {
    follower User @relation(fields: [followerId], references: [id], name: "following", onDelete: Cascade)
    followerId Int
    following User @relation(fields: [followingId], references: [id], name: "followers", onDelete: Cascade)
    followingId Int
    createdAt DateTime @default(now())

    @@id([followerId, followingId])
}

model Notification {
    id Int @id @default(autoincrement())
    user User @relation(fields: [userId], references: [id])
    userId Int
    notification Json
    type NotificationType
    seen Boolean @default(false)
    createdAt DateTime @default(now())
}

model Report {
    id Int @id @default(autoincrement())
    author User @relation(fields: [authorId], references: [id], name: "reportedUsers", onDelete: Cascade)
    authorId Int
    reportedUser User @relation(fields: [reportedUserId], references: [id], name: "reports", onDelete: Cascade)
    reportedUserId Int
    report String @db.VarChar(255)
}

model Ban {
    id Int @id @default(autoincrement())
    author User @relation(fields: [authorId], references: [id], name: "bannedUsers", onDelete: Cascade)
    authorId Int
    user User @relation(fields: [userId], references: [id], name: "bans", onDelete: Cascade)
    userId Int
    reason String?
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    banned Boolean @default(true)
}
